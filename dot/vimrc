if has('vim_starting')
    set nocompatible
    let plug_vim=expand('~/.vim/autoload/plug.vim')
    if !filereadable(plug_vim)
        silent !mkdir -p ~/.vim/autoload
        silent !curl -fLo ~/.vim/autoload/plug.vim https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
        autocmd VimEnter * PlugInstall
    endif
endif

" Leader {{{
let mapleader=','
" }}}

call plug#begin('~/.vim/plugged')

" Easily search for, substitute, and abbreviate multiple variants of a word
Plug 'tpope/vim-abolish'
" Quoting/parenthesizing made simple
Plug 'tpope/vim-surround'
" Enable repeating supported plugin maps with "." 
Plug 'tpope/vim-repeat'
" Heuristically set buffer options like shiftwidth and expandtab
Plug 'tpope/vim-sleuth'
" Comment stuff out
Plug 'tpope/vim-commentary'
" vim-unimpaired - A list of symetric hotkeys
" Primarily used to bubble lines, but lots of cool features, see :h unimpaired
Plug 'tpope/vim-unimpaired'
    " Bubble single lines
    nmap <C-k> [e
    nmap <C-j> ]e
    " Bubble multiple lines
    vmap <C-k> [egv
    vmap <C-j> ]egv


" CtrlP - Fuzzy file, buffer, mru, tag, etc finder
Plug 'ctrlpvim/ctrlp.vim', { 'on': ['CtrlP', 'CtrlPBuffer', 'CtrlPCurFile', 'CtrlPTag'] }
    map <leader>p :CtrlP<CR>
    map <leader>P :CtrlPBuffer<CR>
    map <leader>e :CtrlPCurFile<CR>
    map <leader>t :CtrlPTag<CR>
    let g:ctrlp_user_command = {
        \ 'types': {
            \ 1: ['.git', 'cd %s && git ls-files -co --exclude-standard'],
            \ 2: ['.hg', 'hg --cwd %s locate -I .'],
        \ },
        \ 'fallback': 'find %s -type f'
        \ }
    let g:ctrlp_mruf_exclude = '/tmp/.*\'

" Gundo - visualize and navigate your Vim undo tree
Plug 'sjl/gundo.vim', { 'on': ['GundoShow', 'GundoToggle'] }
    nnoremap <F5> :GundoToggle<CR>

" Fugitive - For sexy git integration
Plug 'bbinet/vim-fugitive'
    noremap <leader>g :Gstatus<cr>
    noremap <leader>G :Gstatus<cr>:q<cr>

" UltiSnips - the ultimate solution for snippets in Vim
Plug 'SirVer/ultisnips', { 'on': [] }
" vim-snippets (they are separated from the ultisnips engine)
Plug 'honza/vim-snippets'

" YouCompleteMe - Advanced code completion engine
Plug 'Valloric/YouCompleteMe', { 'do': './install.sh', 'on': [] }

" Crunch - Vim calculator
Plug 'arecarn/crunch.vim'

" vim-go - An entire development environment package for golang in Vim
Plug 'fatih/vim-go', {'for': 'go'}

Plug 'saltstack/salt-vim', {'for': 'sls'}

" Colorschemes
Plug 'tomasr/molokai'

call plug#end()

" lazy loading of ultisnips and YouCompleteMe plugins on InsertEnter
augroup load_insertenter
    autocmd!
    autocmd InsertEnter * call plug#load('ultisnips', 'YouCompleteMe')
    	\| call youcompleteme#Enable() | autocmd! load_insertenter
augroup END

" Globals {{{
set nocompatible
set modelines=0
set autoread
" make mouse to work with gnu screen
set ttymouse=xterm2
set ttyfast
set viminfo=/10,'10,r/mnt/zip,r/mnt/floppy,f0,h,\"100
set wildmode=list:longest,full
set wildignore+=*.o,*.obj,.git,.svn,*.pyc
set hidden
set switchbuf=useopen
" }}}

" Backups {{{
if v:version >= 703
    set undofile
    set undodir=~/.tmp/vim/undodir//,/tmp//
else
    let g:gundo_disable = 1
endif
set backupdir=~/.tmp/vim/backupdir//,/tmp//
set directory=~/.tmp/vim/directory//,/tmp//
set history=500
set undolevels=500
" }}}

" Search {{{
set incsearch
set hlsearch
set shiftround
set autoindent
set ignorecase
set smartcase
set gdefault
" Disable highlight
map <leader><space> :noh<cr>:call clearmatches()<cr>
" }}}

" User Interface {{{
set guioptions-=T
set guioptions-=r
syntax on
set bg=dark
set number
if exists('+relativenumber')
    set relativenumber
endif
if exists('+cc')
    set cc=80
endif
set listchars=tab:▸\ ,eol:¬,trail:·
set shortmess+=r
set showmode
set showcmd
set showmatch
set t_Co=256
colorscheme molokai
hi ColorColumn ctermbg=234
if has('gui_running')
    set guifont=Menlo:h12
    set go-=m
endif
set ruler
set backspace=indent,eol,start
set laststatus=2
set encoding=utf-8 " Necessary to show unicode glyphs
set scrolloff=3
" }}}

" Micro plugins {{{

" Focus last tab on tab close
augroup FocusOnTabClose
   au!
   au TabLeave * call TabCloseLeave()
   au TabEnter * call TabCloseEnter()
augroup END
function! TabCloseLeave()
   " Vim default behavior is fine for the first and the last tab
   if tabpagenr() != 1 && tabpagenr() != tabpagenr('$')
      augroup TabCloseBufWinLeave
         au!
         autocmd BufWinLeave * let g:TabClosedFlag = 1
      augroup END
   endif
endfunction
function! TabCloseEnter()
   if exists("#TabCloseBufWinLeave")
      au! TabCloseBufWinLeave
   endif
   if exists('g:TabClosedFlag')
      unlet! g:TabClosedFlag
      tabprev
   endif
endfunction 

" }}}

" Movements {{{
" Use the damn hjkl keys, never use the arrow keys!
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>
" }}}
