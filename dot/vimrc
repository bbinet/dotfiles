if has('vim_starting')
    set nocompatible
    let plug_vim=expand('~/.vim/autoload/plug.vim')
    if !filereadable(plug_vim)
        silent !mkdir -p ~/.vim/autoload
        silent !curl -fLo ~/.vim/autoload/plug.vim https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
        autocmd VimEnter * PlugInstall
    endif
endif

" Leader {{{
let mapleader=','
" }}}

call plug#begin('~/.vim/plugged')

" File-line - open a file in a given line
Plug 'bogado/file-line'
" Bracketed-paste - Handles bracketed-paste-mode (aka. automatic `:set paste`)
Plug 'ConradIrwin/vim-bracketed-paste'
" Easily search for, substitute, and abbreviate multiple variants of a word
Plug 'tpope/vim-abolish'
" Quoting/parenthesizing made simple
Plug 'tpope/vim-surround'
" Enable repeating supported plugin maps with "." 
Plug 'tpope/vim-repeat'
" Provides additional text objects
Plug 'wellle/targets.vim'
" Heuristically set buffer options like shiftwidth and expandtab
Plug 'tpope/vim-sleuth'
" Comment stuff out
Plug 'tpope/vim-commentary'
" Use CTRL-A/CTRL-X to increment dates, times, and more
Plug 'tpope/vim-speeddating'
" vim-unimpaired - A list of symetric hotkeys
" Primarily used to bubble lines, but lots of cool features, see :h unimpaired
Plug 'tpope/vim-unimpaired'
    " Bubble single lines
    nmap <C-k> [e
    nmap <C-j> ]e
    " Bubble multiple lines
    vmap <C-k> [egv
    vmap <C-j> ]egv

" quickfix-reflector.vim - Change code right in the quickfix window
Plug 'stefandtw/quickfix-reflector.vim'
" vim-qargs - Add Qargs and Qdo utility commands
Plug 'MarioRicalde/vim-qargs'

" CtrlP - Fuzzy file, buffer, mru, tag, etc finder
Plug 'ctrlpvim/ctrlp.vim', { 'on': ['CtrlP', 'CtrlPBuffer', 'CtrlPCurFile', 'CtrlPTag'] }
    map <leader>p :CtrlP<cr>
    map <leader>P :CtrlPBuffer<cr>
    map <leader>e :CtrlPCurFile<cr>
    map <leader>t :CtrlPTag<cr>
    let g:ctrlp_user_command = {
        \ 'types': {
            \ 1: ['.git', 'cd %s && git ls-files -co --exclude-standard'],
            \ 2: ['.hg', 'hg --cwd %s locate -I .'],
        \ },
        \ 'fallback': 'find %s -type f'
        \ }
    let g:ctrlp_mruf_exclude = '/tmp/.*\'

" Gundo - visualize and navigate your Vim undo tree
Plug 'sjl/gundo.vim', { 'on': ['GundoShow', 'GundoToggle'] }
    nnoremap <F5> :GundoToggle<cr>
    inoremap <F5> <esc>:GundoToggle<cr>
    if has('python3')
        let g:gundo_prefer_python3 = 1
    endif

" Fugitive - For sexy git integration
Plug 'bbinet/vim-fugitive'
    noremap <leader>g :Gstatus<cr>

" GitGutter - Show git diff in the gutter (sign column) and stages/undoes hunks
Plug 'airblade/vim-gitgutter'
    nmap ]h <Plug>GitGutterNextHunk
    nmap [h <Plug>GitGutterPrevHunk
    omap ih <Plug>GitGutterTextObjectInnerPending
    omap ah <Plug>GitGutterTextObjectOuterPending
    xmap ih <Plug>GitGutterTextObjectInnerVisual
    xmap ah <Plug>GitGutterTextObjectOuterVisual

    function! GlobalChangedLines(ex_cmd)
      for hunk in GitGutterGetHunks()
        for lnum in range(hunk[2], hunk[2]+hunk[3]-1)
          let cursor = getcurpos()
          silent! execute lnum.a:ex_cmd
          call setpos('.', cursor)
        endfor
      endfor
    endfunction

    command! -nargs=1 Glines call GlobalChangedLines(<q-args>)

" UltiSnips - the ultimate solution for snippets in Vim
"Plug 'SirVer/ultisnips', { 'on': [] }
" vim-snippets (they are separated from the ultisnips engine)
"Plug 'honza/vim-snippets'

" TagBar - A class outline viewer for vim
Plug 'majutsushi/tagbar', { 'on': 'TagbarToggle' }
    nnoremap <F8> :TagbarToggle<cr>
    inoremap <F8> <esc>:TagbarToggle<cr>

" Crunch - Vim calculator
Plug 'arecarn/crunch.vim'

" Codi - The interactive scratchpad for hackers
Plug 'metakirby5/codi.vim'

" Fakeclip - Pseudo clipboard register for non-GUI version of Vim
Plug 'kana/vim-fakeclip'

" Cursorword - Underlines the work under the cursor
Plug 'itchyny/vim-cursorword'

" vim-go - An entire development environment package for golang in Vim
Plug 'fatih/vim-go', {'for': 'go'}

" riv - environment for ReST in Vim
Plug 'Rykka/riv.vim', {'for': 'rst'}

Plug 'saltstack/salt-vim', {'for': 'sls'}

Plug 'Glench/Vim-Jinja2-Syntax'

" Colorschemes
Plug 'tomasr/molokai'
Plug 'pR0Ps/molokai-dark'
Plug 'itchyny/landscape.vim'

call plug#end()

" Globals {{{
set nocompatible
set modelines=2
set autoread
" make mouse to work with gnu screen
set ttymouse=xterm2
set ttyfast
set viminfo=/10,'10,r/mnt/zip,r/mnt/floppy,f0,h,\"100
set wildmode=list:longest,full
set wildignore+=*.o,*.obj,.git,.svn,*.pyc
set hidden
set switchbuf=useopen
set pastetoggle=<F2>
" }}}

" Backups {{{
if v:version >= 703
    set undofile
    set undodir=~/.tmp/vim/undodir//,/tmp//
else
    let g:gundo_disable = 1
endif
set backupdir=~/.tmp/vim/backupdir//,/tmp//
set directory=~/.tmp/vim/directory//,/tmp//
set history=500
set undolevels=500
" }}}

" Search {{{
set incsearch
set hlsearch
set shiftround
set autoindent
set ignorecase
set smartcase
set gdefault
" Disable highlight
map <leader><space> :noh<cr>:call clearmatches()<cr>
" }}}

" User Interface {{{
set guioptions-=T
set guioptions-=r
syntax on
set bg=dark
set number
if exists('+relativenumber')
    set relativenumber
endif
if exists('+cc')
    set cc=80
endif
scriptencoding utf-8
set encoding=utf-8 " Necessary to show unicode glyphs
set listchars=tab:▸\ ,eol:¬,trail:·
set shortmess+=r
set showmode
set showcmd
set showmatch
set t_Co=256
colorscheme molokai-dark
hi ColorColumn ctermbg=234
if has('gui_running')
    set guifont=Menlo:h12
    set go-=m
endif
set ruler
set backspace=indent,eol,start
set laststatus=2
set scrolloff=3
" }}}

" Micro plugins {{{

" Focus last tab on tab close
augroup FocusOnTabClose
   au!
   au TabLeave * call TabCloseLeave()
   au TabEnter * call TabCloseEnter()
augroup END
function! TabCloseLeave()
   " Vim default behavior is fine for the first and the last tab
   if tabpagenr() != 1 && tabpagenr() != tabpagenr('$')
      augroup TabCloseBufWinLeave
         au!
         autocmd BufWinLeave * let g:TabClosedFlag = 1
      augroup END
   endif
endfunction
function! TabCloseEnter()
   if exists("#TabCloseBufWinLeave")
      au! TabCloseBufWinLeave
   endif
   if exists('g:TabClosedFlag')
      unlet! g:TabClosedFlag
      tabprev
   endif
endfunction 

" }}}

" Movements {{{
" Use the damn hjkl keys, never use the arrow keys!
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>
" }}}

" Cursorline {{{
aug cursorline
    " Highlight the current line in the current window.
    au!
    au BufEnter * set cursorline
    au BufLeave * set nocursorline
    au InsertEnter * set nocursorline
    au InsertLeave * set cursorline
aug end
" }}}

" QuickFix {{{
aug quickfix
    au!
    au Filetype qf setlocal colorcolumn=0 nolist nocursorline nowrap modifiable
    au Filetype qf nnoremap <silent> <buffer> q :cclose<cr>
    " Open quickfix window after any grep invocation
aug end
" Open/close the quickfix
noremap <leader>q :cope<cr>
noremap <leader>Q :cclose<cr>
" Add QGgrep command to display the result of Ggrep directly in the quickfix
command! -nargs=1 -complete=command QGgrep silent exe 'Ggrep! <args>' | redraw! | cope
" git-grep word under cursor
noremap <leader>* "cyiw:QGgrep "\<<c-r>c\>"<cr>
" }}}

" Other miscellanous shortcuts {{{

" Allow saving of files as sudo when I forgot to start vim using sudo
cmap w!! w !sudo tee > /dev/null %

" Close the preview window
noremap <leader>c :pclose<cr>

" }}}
