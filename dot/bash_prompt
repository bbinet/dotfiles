#!/bin/bash

reset='\[\e[0m\]'
# regular colors
black='\[\e[0;30m\]'
red='\[\e[0;31m\]'
green='\[\e[0;32m\]'
yellow='\[\e[0;33m\]'
blue='\[\e[0;34m\]'
purple='\[\e[0;35m\]'
cyan='\[\e[0;36m\]'
white='\[\e[0;37m\]'
# bold colors
bblack='\[\e[1;30m\]'
bred='\[\e[1;31m\]'
bgreen='\[\e[1;32m\]'
byellow='\[\e[1;33m\]'
bblue='\[\e[1;34m\]'
bpurple='\[\e[1;35m\]'
bcyan='\[\e[1;36m\]'
bwhite='\[\e[1;37m\]'
# bold
bold=`tput bold`
normal=`tput sgr0`

if [[ "$USER" == "root" ]]
then
  export PS1="${bblack}\t ${bred}\u${red}@\h:${cyan}\w${reset}${white} \$ ${reset}";
else
  export PS1="${bblack}\t \u${white}@\h:${cyan}\w${reset}${white} \$ ${reset}";
fi 

# 100% pure Bash (no forking) function to determine the name of the current git branch
__git_branch() {
    export GITBRANCH=""

    local repo="${_GITBRANCH_LAST_REPO-}"
    local gitdir=""
    [[ ! -z "$repo" ]] && gitdir="$repo/.git"

    # If we don't have a last seen git repo, or we are in a different directory
    if [[ -z "$repo" || "$PWD" != "$repo"* || ! -e "$gitdir" ]]; then
        local cur="$PWD"
        while [[ ! -z "$cur" ]]; do
            if [[ -e "$cur/.git" ]]; then
                repo="$cur"
                gitdir="$cur/.git"
                break
            fi
            cur="${cur%/*}"
        done
    fi

    if [[ -z "$gitdir" ]]; then
        unset _GITBRANCH_LAST_REPO
        return 0
    fi
    export _GITBRANCH_LAST_REPO="${repo}"
    local head=""
    local branch=""
    read head < "$gitdir/HEAD"
    case "$head" in
        ref:*)
            branch="${head##*/}"
            ;;
        "")
            branch=""
            ;;
        *)
            branch="d:${head:0:7}"
            ;;
    esac
    if [[ -z "$branch" ]]; then
        return 0
    fi
    export GITBRANCH="$branch"
}

__jobs_ps1() {
    local jobcount="$(jobs -p | wc -l)"
    [[ "$jobcount" -gt 0 ]] && printf "${white}[${purple}${jobcount##* }${white}]+${reset} "
}

__venv_ps1() {
    local virtualenv="${VIRTUAL_ENV##*/}"
    [[ ! -z "$virtualenv" ]] && printf "${white}(${bblue}$virtualenv${white})${reset} "
}

__git_ps1() {
    prefix="$1"
    suffix="$2"

    __git_branch

    PS1="$prefix"
    if [ ! -z "$GITBRANCH" ]; then
        PS1+="${white}(${bgreen}$GITBRANCH${white})${reset} "
    fi
    PS1+="$suffix"

    export PS1
}

if [ -f /usr/lib/git-core/git-sh-prompt ] && [ -z "$FAST_PROMPT" ]
then
    GIT_PS1_SHOWCOLORHINTS=true
    GIT_PS1_SHOWDIRTYSTATE=true
    GIT_PS1_SHOWSTASHSTATE=true
    GIT_PS1_SHOWUNTRACKEDFILES=true
    GIT_PS1_SHOWUPSTREAM="auto"
    . /usr/lib/git-core/git-sh-prompt
fi

if [ -z "${_ORIG_PS1}" ]; then
    export _ORIG_PS1="$PS1"
fi

export PROMPT_COMMAND='__git_ps1 "$(__jobs_ps1)$(__venv_ps1)" "$_ORIG_PS1" "${white}(${bold}%s${white})${normal} "'
